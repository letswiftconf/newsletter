{"version":"1.0","releaseAt":725036400,"items":[{"title":"5 key features that locked me into macOS | by Folutile writes Tech ","comments":"애플이 가장 잘하는 전략이 락인이죠. 뒷부분에 번들 패키지 광고(?)가 포함되어 있지만 macOS를 계속 사용하게 하는 핵심 기능을 설명합니다. 다른 플랫폼에서도 찾아보면 이런저런 기능이 있지만 다같이 얽혀있는 경우는 매우 드무니까요","keywords":["Culture"],"location":"https:\/\/medium.com\/@folutilewritestech\/5-fun-features-that-locked-me-into-macos-43a2a495d1ba","summary":"macOS를 계속 사용하는 이유를 5가지 주요 기능을 통해 설명합니다. 첫째, 'Lookup' 기능으로 파일이나 문서를 쉽게 미리 볼 수 있고, 사진 편집 같은 작업도 가능합니다. 둘째, 'Spotlight' 검색 기능은 문서나 이미지를 빠르게 찾을 수 있게 도와줍니다. 셋째, 'Continuity' 기능으로 다양한 애플 기기 간의 연결과 동기화가 수월해지며, 이를 통해 노트 작성이나 문서 검토 등을 다른 기기에서 이어서 할 수 있습니다. 넷째, 'Airdrop'은 파일을 빠르고 쉽게 공유할 수 있게 해주는 기능입니다. 다섯째, '보안과 보호' 측면에서 MacOS는 타 OS에 비해 상대적으로 바이러스로부터 안전하다고 합니다. \n\n키워드: MacOS, Lookup, Spotlight, Continuity, Airdrop, 보안"},{"summary":"`@Observable` 매크로의 성능 향상에 대한 글입니다. 이 매크로는 WWDC 2023에서 소개되었으며, ObservableObject와 @Published 변수를 대체하기 위해 만들어졌습니다. `@Observable` 사용 시 불필요한 SwiftUI 뷰의 재그리기를 방지함으로써 성능을 향상시키므로, 기존의 ObservableObject 인스턴스를 `@Observable`로 교체하는 것이 추천됩니다. 개발자들은 또한 디버깅 기사 \"Debugging SwiftUI views: what caused that change?\"를 참조하여 매크로 도입 전후 뷰 반응 방식을 이해하는 것이 좋습니다.\n\n@Observable 매크로는 속성이 변할 때 SwiftUI 뷰에 자동으로 변화를 알리면서 내부적으로 ObservationTracked 매크로와 Observation.Observable 프로토콜을 사용합니다. 오직 변화한 속성에 대해서만 뷰를 재그리기 때문에 앱 성능이 크게 향상됩니다. 관련 없는 속성이 변해도 뷰가 불필요하게 다시 그리지 않습니다.\n\n`@Observable` 매크로 외에도, viewModel이 부모 뷰에 의해 다시 생성될 때 뷰 모델이 초기화되지 않도록 `@State`를 사용하여 인스턴스의 저장을 SwiftUI에 맡기는 것이 중요합니다.\n\n요약 키워드:\n- @Observable 매크로\n- 성능 향상\n- SwiftUI 뷰 다시 그리기 방지\n- ObservableObject 교체 권장\n- @State 사용 중요성","comments":"`@Observable` 매크로 내부에서 다시 ObservationTracked 매크로와 Observation.Observable 프로토콜을 사용하기 때문에 기존보다 더 성능상 이득이 되는 부분을 설명합니다","keywords":["Swift"],"title":"@Observable Macro performance increase over ObservableObject","location":"https:\/\/www.avanderlee.com\/swiftui\/observable-macro-performance-increase-observableobject\/?"},{"comments":"visiosOS 관련 소식이 조금 늘어난 것 같네요. 공간 컴퓨터로 보는 3D 공간에서 입체적인 앱 아이콘은 어떤 느낌일까요? 앱 아이콘만 해도 꽤 큰 변화가 될 것 같습니다","title":"Adapting your App Icon to visionOS","location":"https:\/\/www.createwithswift.com\/adapting-your-app-icon-to-visionos\/?","keywords":["VisionOS","Design"]},{"location":"https:\/\/martinmitrevski.com\/2024\/01\/02\/anyviews-impact-on-swiftui-performance\/?","title":"AnyView’s impact on SwiftUI performance – martinmitrevski","comments":"SwiftUI 컨테이너 뷰에서 이질적인 여러 뷰 종류를 포함할 때 타입을 지운 뷰 - AnyView를 사용하면 성능은 어떻게 될까. 궁금해서 직접 실험해본 개발자가 있네요. 아이폰 11 프로 맥스에서 테스트하고 인스트루먼츠로 측정했다고 하네요","summary":"SwiftUI에서의 AnyView 사용과 그 성능 영향에 대해 다룹니다. AnyView는 다양한 타입의 뷰를 포함하는 컨테이너에서 유용하며 코드를 단순화 시키지만, 성능 저하의 원인이 될 수 있습니다. SwiftUI는 뷰 타입을 기반으로 차이점을 계산하기 때문에, AnyView 사용 시 SwiftUI는 뷰의 정체성과 구조를 파악하기 어렵게 되어 전체 뷰를 다시 그릴 수 밖에 없습니다.\n\n성능 테스트는 iPhone 11 Pro Max에서 여러 번 수행되었으며, 데이터는 페이지당 25개 항목씩 불러오면서 애니메이션 Hitches 프로파일과 FPS 프로파일링로 기본 제네릭 기반 구현과 AnyView를 사용한 구현을 비교했습니다.\n\nAnyView 없이 구현한 경우 모든 테스트에서 대체로 59FPS 근처로 안정적인 성능을 나타냈습니다. AnyView를 사용할 경우 데이터 탐색이 약 10%, 데이터를 수정하면서 탐색하는 경우 약 17%까지 성능이 저하되었으며, 눈에 띄는 퍼포먼스 차이가 생겼습니다.\n\n결론적으로 heterogenous views의 스크롤 가능 리스트에는 AnyView보다 구체적인 타입을 사용하는 것이 성능 면에서 더 나은 선택입니다. AnyView의 성능에 항상 영향을 미치는 것은 아니며, 일부 상황에서는 성능 차이가 없다는 것이 실험을 통해 밝혀졌습니다.\n\n요약 키워드: SwiftUI, AnyView, 성능 저하, 애니메이션 히치, FPS, 테스트, 성능 분석.","keywords":["SwiftUI","OpenSources","Testing"]},{"keywords":["Culture"],"comments":"애플이 3개월 전쯤에 공개한 멀티모달 LLM Ferret 모델에 대한 설명입니다. 마이크로소프트나 구글에 비해 잘 드러나지 않고 시리 같은 서비스에 합쳐질려면 시간이 더 필요할 것 같지만 그렇다고 아무것도 안하지는 않고 있네요","location":"https:\/\/pub.towardsai.net\/apple-outclasses-chatgpt-with-ferret-c5a4eacccda0","summary":"애플이 'Ferret'이라는 새로운 AI 모델을 발표했다는 소식이다. 이 모델은 기존의 ChatGPT-Vision 모델이 수행하는 여러 작업에서 더 좋은 성능을 보이며, 2024년에 애플이 출시할 제품에 대한 가능성을 제시한다. Ferret 모델은 이미지 내의 자유로운 형태의 객체를 참조하고 인식하는 능력을 가지고 있는데, 이는 객체의 모양이 불규칙하거나, 다른 객체에 부분적으로 가려져 있거나, 해상도 문제로 잘 보이지 않는 등의 복잡한 상황에서도 가능하다.\n\nFerret의 성공 비결은 '하이브리드 표현'이라는 기술에 있다. 이는 이미지 인코더와 텍스트 프롬프트, 시각적 단서 (예: 화살표, 박스, 자유 형태의 모양) 등 다양한 입력을 처리하여 전역적 관심(global attention) 메커니즘뿐만 아니라 특정 지역에 대해 상세하게 처리하는 기능을 갖추고 있다. 이를 통해 애플의 Ferret은 다른 모델들보다 훨씬 적은 '환각(hallucination)' 문제를 가지며 더 정확한 결과를 제공한다.\n\n애플은 대규모 AI 모델 경쟁에 참여하고자 하는 것이 아니라, 소비자 제품에 집중하고 있으며, 이를 통해 Ferret과 같은 모델의 기술을 활용하여 컨텍스트 인식 이미지 및 비디오 편집 기능, 개선된 Siri 상호작용, 건강 관련 서비스 향상 등을 제공할 것으로 기대된다. 이러한 서비스 향상은 멀티모달 대규모 언어 모델(MLLM)을 생산 준비 단계로 만들기 위해 필수적이다.\n\n- 요약 키워드: 애플(Ferret 모델 발표), 이미지 인식(ChatGPT-Vision 대비 우수), 하이브리드 표현, 전역 관심 메커니즘(글로벌 어텐션), 소비자 제품 강화(컨텍스트 인식 기능).","title":"Apple Outclasses ChatGPT with Ferret | Towards AI"},{"keywords":["Culture"],"comments":"저널 앱에 대한 상세한 설명입니다. 저도 몇 번 안 써봐서 다양한 일기 추천을 받아보지 못했네요. 언제 어떻게 스케줄링을 설정할 수 있는지 비교적 상세하게 설명하고 있습니다","location":"https:\/\/medium.com\/technology-hits\/apples-all-new-journal-app-everything-you-need-to-know-980061163ce7","title":"Apple’s All-New JOURNAL App — Everything You Need To Know! | by Aditya Darekar "},{"comments":"레츠스위프트 뉴스레터를 못 읽어봐서 추천을 안해준 거겠죠. 2024년에 기대되는 매력적인 뉴스레터를 추천해줍니다","location":"https:\/\/blog.eidinger.info\/awesome-newsletters-for-ios-and-swift-developers-in-2024?","keywords":["Culture"],"title":"Awesome newsletters for iOS and Swift developers in 2024"},{"location":"https:\/\/medium.com\/theymakedesign\/app-design-ideas-vol-210-69bb50a162be","comments":"","title":"Bright and Fantastic App Design Ideas | TMDesign","keywords":["Design"]},{"comments":"AVPlayerViewController가 SwiftUI를 지원하도록 확장하고 PIP를 구현하는 과정을 설명합니다. ","keywords":["SwiftUI"],"title":"Building a SwiftUI App with AVPlayerController and Picture in Picture in Swift | by AutoMagicianAE ","location":"https:\/\/medium.com\/@edabdallamo\/building-a-swiftui-app-with-avplayercontroller-and-picture-in-picture-in-swift-e2e9d22f7341"},{"title":"Can the Apple Vision Pro Survive its Price Tag? | by Michael Swengel ","location":"https:\/\/medium.com\/macoclock\/can-the-apple-vision-pro-survive-its-price-tag-6d777e42b63e","keywords":["Hardware"],"comments":"비전 프로에 대한 우려와 걱정은 예약 판매를 앞둔 지금도 끝나지 않네요. 최저가가 $3499 이지만 세금포함하면 대충 계산해서 500만원 수준이라 엄두가 나지 않는 금액이네요. ","summary":"애플의 Vision Pro는 탁월한 기술 제품이지만 가격이 매우 비싸며 이는 평균 사용자에게 부담을 준다. 비전 프로는 고사양의 M2 칩을 탑재하고 있으며, 각종 센서와 기술이 집약된 독립형 컴퓨터로서 기능한다. 그러나 $3,499의 가격표는 제품의 미래를 걱정케 한다. 애플이 이 제품을 산업용이 아닌 일반 소비자용으로 마케팅한 것처럼 보이지만, 높은 가격은 대중적인 수용을 제한할 수 있다. 미래 세대의 Vision Pro가 더 저렴해질 수 있지만, 현재로서는 많은 사람들이 이 기술을 경험하기 어려울 것이다. 애플은 과거에도 프리미엄 가격을 책정해왔으므로, 앞으로도 고가 정책을 유지할 가능성이 있다. 이로 인해 Vision Pro가 시장에 잘 받아들여질지는 두고 봐야 할 문제이다.\n\n키워드: 애플 Vision Pro, 가격, M2 칩, 대중적 수용, 프리미엄 정책"},{"comments":"앱 번들에 여러 아이콘 파일을 포함해서 배포하고, 로직에서 앱 아이콘 바꾸기 어렵지 않습니다","title":"Changing your iOS App Icon programmatically | Medium","keywords":["SwiftUI"],"location":"https:\/\/blorenzop.medium.com\/app-icon-programmatically-51fca3130871"},{"title":"Coalescing Geographic Locations with SwiftUI & MapKit | by Steven Kish ","comments":"맵킷은 SwiftUI에서 쓰기 편한 편입니다. 클러스터링까지 고려해서 확대 축소 과정에서 세부 마커를 표시하는 방식을 설명합니다. ","location":"https:\/\/medium.com\/@stevenkish\/coalescing-map-annotations-with-swiftui-5d7bdca567e8","keywords":["SwiftUI"]},{"title":"Creating Views in SwiftUI for VisionOS | by Michael Zheng ","keywords":["VisionOS","SwiftUI"],"comments":"VisionOS에서 앱들은 어떻게 보일까요? 애플 실리콘 맥에서는 시뮬레이터가 동작하기는 하지만, 아무리 봐도 실제 느낌을 모르겠습니다 ㅎㅎ 그래도 애플은 익숙한 화면을 그대로 보여줄 수 있도록 신경을 많이 쓴 것 같습니다","location":"https:\/\/medium.com\/@michaelzheng67\/creating-views-in-swiftui-for-visionos-f4d6e6a43423"},{"location":"https:\/\/itnext.io\/decoding-the-power-of-protobuf-a-comprehensive-guide-a91a7bad46c0","title":"Decoding the Power of Protobuf: A Comprehensive Guide | by Dwen ","comments":"Protobuf를 소개한 자료가 있어서 가져와봤습니다. 대부분 HTTP 프로토콜과 JSON 형식의 데이터를 많이 쓰지만 세상에는 많은 프로토콜과 데이터 표현이 있습니다. gRPC와 함께 Protobuf를 학습해보는 것도 추천드립니다","keywords":["Culture","pick"]},{"title":"Diving Into the Powerful PDF Capabilities of the iPad | by Tobias Hedtke ","comments":"아이패드는 PDF를 다루기 완벽한 기기라는 것은 동의합니다. 문서를 작성하거나 화면을 기록해서 PDF로 만들고, 애플 펜슬로 PDF에 필기하기도 좋구요. ","location":"https:\/\/medium.com\/macoclock\/diving-into-the-powerful-pdf-capabilities-of-the-ipad-5a6d26049843","keywords":["Culture"],"summary":"아이패드는 PDF 관리를 위한 완벽한 기기입니다. 아이패드에는 PDF 관리를 위한 다양한 유용한 소프트웨어 기능이 풍부하게 내장되어 있으며, 이러한 기능들은 다른 앱에서 많은 비용을 지불해야 사용할 수 있는 기능들입니다. 또한, 아이패드는 터치 중심의 기기여서 이러한 기능들을 매우 직관적으로 사용할 수 있습니다. 특히 디지털 문서 처리를 위해 필수적인 애플 펜슬을 지원하는 유일한 애플 생태계 기기입니다.\n\n디지털 오피스의 장점은 문서를 클라우드에 저장하여 언제 어디서나 접근 가능하게 하고, 팀과 문서를 쉽게 공유하거나 특정 문서 위에서 동시에 작업하는 것을 용이하게 합니다. 또한, 디지털 문서는 검색 가능하다는 점에서 물리적 문서보다 우월합니다. 디지털 오피스는 언제 어디서나 작업할 수 있는 환경을 제공합니다.\n\n아이패드에서는 워드, 엑셀, 파워포인트 등의 문서 작성 프로그램에서 PDF로 쉽게 변환하여 저장할 수 있습니다. 이메일을 PDF로 저장하는 방법을 비롯해 '인쇄해서 PDF로 저장'과 '스크린샷을 PDF로 변환'하는 방법, 그리고 클라우드 서비스에 연결된 파일 앱에서 직접 문서를 스캔하는 기능 등이 제공됩니다.\n\nPDF 파일을 편집할 때는 파일 앱을 사용하여 페이지 순서를 변경하거나 페이지를 복사하고 회전시키고, 심지어 이미 있는 PDF 문서 안에 새로운 문서나 오브젝트를 추가할 수 있습니다. 폼이 있는 경우, 아이패드OS 17 업데이트로 파일 앱은 PDF 폼의 입력 필드를 자동으로 감지하고 텍스트 박스를 추가하여 편집할 수 있게 되었습니다.\n\nPDF 문서에 주석을 달아 협업하는 경우, 애플 펜슬을 사용하거나 키보드를 이용하여 '텍스트 폼 박스 추가' 옵션을 사용할 수 있습니다. 또한, 아이패드 파일 앱을 사용하여 PDF 파일에 서명을 추가하고, 필요한 회사 도장 이미지를 디지털 스탬프로 만들어 삽입할 수 있습니다.\n\n전문 PDF 도구를 대체하는 것에 대해, 필자는 아이패드가 상당 부분 대체할 수 있다고 생각하지만, 아직 몇 가지 빠진 기능들도 있습니다. 예를 들어, 파일 앱에 추가해야 할 기능으로는 향상된 코멘트 옵션, 보안 인증의 도입이 있습니다. 하지만, 대체로 아이패드는 아무런 추가 비용 없이 전문 PDF 관리 소프트웨어와 견줄 수 있는 최고의 PDF 관리 기기입니다.\n\n요약 키워드: 아이패드, PDF 관리, 디지털 오피스, 애플 펜슬, 파일 앱"},{"location":"https:\/\/medium.com\/theymakedesign\/app-design-inspiration-vol-211-370dd0ceae3c","title":"Elegant and Playful Application Designs | TMDesign","comments":"이런 컨셉과 디자인을 보면 구현해보고 싶다는 생각을 막연하게 해봅니다. 막상하면 도망갈 지도 모르겠지만요","keywords":["Design"]},{"location":"https:\/\/github.com\/build-trust\/ockam\/blob\/develop\/examples\/app\/portals\/README.md?","keywords":["OpenSources","pick"],"title":"Encrypted Portals between Macs – built in Swift and Rust | github","comments":"분산 컴퓨팅 환경에서 종단끼리 암호화하고 명령을 주고 보낼 수 있도록 도와주는 ockam 이라는 오픈소스 프로젝트가 있습니다. 링크는 ockam 예제 중에 서로 다른 장비를 연결해주는 portal 앱 예시입니다. "},{"summary":"애플은 M3, M3 Pro, M3 Max로 명명된 자체 3세대 시스템 온 칩(SoC)을 출시하였고, M3 Max는 가장 강력한 칩으로, 무거운 비디오 및 사진 편집, 복잡한 그래픽 렌더링 작업이 필요한 사람과 최신 기술을 소유하고자 하는 사람을 위해 설계되었습니다. 일반 사용자는 M3와 M3 Pro 중에서 선택해야 합니다. 저자는 M3 Pro가 대부분의 MacBook Pro 필요에 충분하다고 추천합니다. 하지만 애플이 M 시리즈 칩을 너무 잘 만들어서 현재의 맥북을 가진 약 90%의 소유자들에게는 여전히 충분하다는 문제가 있습니다.\n\n업그레이드를 정당화하기 위한 이유를 찾기 어렵습니다. 가장 인기 있는 이유 중 하나는 현재 장치의 잔존 가치를 최대화하는 것입니다. 저자의 아내는 업그레이드 필요성에 의문을 제기하며 기술에 대한 저자의 취미를 지지하지만 실제 유의미한 장점 없이는 업그레이드를 권하지 않습니다. 저자 역시 M1 Pro MacBook Pro의 성능에 만족하며, 업그레이드에 대한 현실적인 이유를 찾는 것이 어렵다고 인정합니다.\n\n- 키워드: 애플(Apple), M3 시리즈, MacBook Pro, 업그레이드, 성능 만족","title":"Ending the MacBook Pro M3 Upgrade Confusion | by Lewis J Doyle ","comments":"당연하게도 모든 사람이 신형 맥북을 사야하는 건 아닐 겁니다. 물론 애플 마켓팅 팀은 그러고 싶겠지만요. 늘 새로운 제품이 나오고 그걸 사야하는 나름의 이유를 찾는 게 우리의 일상일 뿐이죠 ","location":"https:\/\/medium.com\/@lewisjdoyle\/ending-the-macbook-pro-m3-upgrade-confusion-c25f2b951d72","keywords":["Hardware"]},{"keywords":["DeveloperTools"],"title":"Ensuring Security for Secrets in iOS App | by Gizem Türker ","location":"https:\/\/medium.com\/@gizemturker\/ensuring-security-for-secrets-in-ios-app-ff4a25c533a1","comments":"주요한 토큰이나 키를 어디에 저장할 것인가. 질문에 대한 방법을 xcconfig 파일에 저장해보자는 것인데, 암호화하는 게 아니지만 strings 명령에 바로 나오지 않으니까 더 낫다고 끝납니다. 당연히고 이게 최선은 아닙니다"},{"keywords":["Swift","영어","pick"],"location":"https:\/\/lucasvandongen.dev\/swift_actors_and_protocol_extensions.php?","title":"Exploring Actors and Protocol Extensions | by Lucas van Dongen","comments":"이제 병렬 처리를 쉽게 처리하는 async\/await 방식으로 멀티 스레드 환경을 다룰 수 있습니다. 액터를 사용하더라도 프로토콜 확장하면 안전하지 못한 상황이 생길 수 있다고 얘기합니다. ","summary":"Lucas van Dongen이 쓴 글에서는 Swift 언어의 최신 기능을 사용하는 블로그 포스트 작성 과정을 이야기합니다. 특히 Swift의 구조체와 프로토콜 확장을 사용해 컴파일 시 안전한 스레드 관리의 약속을 유지하는지에 대해 설명합니다. Swift의 초기 버전이 타입 안전성에 중점을 뒀듯이, Swift 5.0 이후 개발자들은 스레드 안전성을 다음 목표로 삼습니다. 이를 위해 `async\/await`, 작업 API와 구조화된 동시성, 액터 및 액터 격리, Objective-C와의 동시성 상호운용성 등이 개발됩니다. \n\n이 글에서는 Lucas가 액터(actor)를 사용한 동시성 관련 문제 해결 방법을 실험하면서 발견한 문제점을 설명합니다. 특히 프로토콜 확장을 액터에 사용할 때 발생할 수 있는 문제점과 이를 안전하게 사용하는 방법을 알아봅니다. 만약 프로토콜의 구현이 확장에서 이뤄진다면 기본적으로 컨텍스트 안전하지 않다는 것을 발견합니다. 이 문제를 해결하기 위해 액터 프로토콜을 상속하는 방식과 글로벌 액터에 대한 확장 사용법을 보입니다.\n\nLucas는 Swift를 사용하는 개발자라면 동시성 문제를 유닛 테스트로 확인하고, 이를 해결하기 위한 방법을 테스트 및 적용하며, 프로토콜\/확장을 작성할 때 액터 상속을 항상 추가할 것을 조언합니다. 그는 앞으로 Swift 6 버전에 대해 큰 기대를 하고 있으며 개발자들이 동시성 모델에서의 이러한 문제를 해결하는 것을 희망합니다.\n\n요약 키워드: #Swift, #동시성, #액터, #프로토콜_확장, #스레드_안전성"},{"title":"Exploring the Dual iPad Setup | by Tobias Hedtke ","comments":"12.9인치 아이패드 프로와 아이패드 미니 두 대를 한꺼번에 다루는 방식들을 기록했네요. 아이패드를 맥북 사이드카로 쓰는 경우는 많이 봤는데, 아이패드 미니를 아이패드 보조 모니터로 쓰는 경우는 흥미롭네요","location":"https:\/\/medium.com\/macoclock\/exploring-the-dual-ipad-setup-468ef2acfad0","keywords":["Hardware"]},{"keywords":["VisionOS"],"location":"https:\/\/www.rudrank.com\/exploring-visionos-accessibility-voiceover-gestures\/?","title":"Exploring visionOS Accessibility: VoiceOver Gestures","comments":"아이폰이나 아이패드처럼 터치 장비에서는 제스처로 접근성 입력을 대신 할 수 있습니다. visionOS에서는 보이스오버와 같은 접근성 기능을 어떻게 활용하게 되는 지 설명합니다. 언제쯤 직접 써볼 수 있을까요"},{"keywords":["Architecture"],"comments":"간단한 Facade 구현 예제를 포함하는 비교적 짧은 글입니다. 파사드 장단점을 충분히 알기는 어렵지만 어떤 형태로 접근할 수 있는 지 시작하기 좋습니다","title":"Facade Design Pattern in Swift | by Kelvin Tan ","location":"https:\/\/medium.com\/swiftly-engineered-ios\/facade-design-pattern-in-swift-5cd4e2943301"},{"location":"https:\/\/towardsdatascience.com\/geospatial-indexing-explained-a-comparison-of-geohash-s2-and-h3-68d4ed7e366d","keywords":["Culture"],"title":"Geospatial Indexing Explained: A Comparison of Geohash, S2, and H3 | by Ben Feifke ","comments":"구글 어스 같은 서비스를 개발할 때 기준이 되는 데이터를 다루기 위한 Geospatial Indexing 지리공간 인덱싱이라는 기술에 대해 소개하는 글입니다. ","summary":"지리공간 인덱싱은 위도-경도 쌍을 지리적 공간의 작은 구획으로 인덱싱하는 과정으로 데이터 과학자들이 자주 사용하는 기술입니다. 지리공간 인덱싱 도구에는 Geohash, Google의 S2, Uber의 H3 등이 있으며 각각 고유의 특성과 기능을 가지고 있습니다.\n\n- Geohash는 2008년에 개발되었으며 위도-경도 쌍을 Geohash 광장으로 매핑하며 그 결과를 문자열로 식별합니다. Z-order 곡선을 이용하는 것이 특징이지만 문자열 기반 근접성과 극지방에서의 효율성 문제가 있습니다.\n- S2는 2017년 구글에서 개발했으며, Hilbert 곡선과 해체된 큐브 투영을 이용하여 Z-order 곡선의 근접성 문제를 해결합니다. 일관된 크기의 셀을 제공하지만, 셋업이 복잡할 수 있습니다.\n- H3는 2018년 Uber에서 발표한 최신 지리공간 인덱싱 도구로, 육각형 셀을 사용하고 이코사헤드론 투영을 사용합니다. 이것은 해상에서 더 일관된 크기의 셀을 제공하지만 공간 채우기 곡선이나 셀의 체계적인 구조에는 제약이 있습니다.\n\n어떤 도구를 사용할지는 구체적인 문제 상황과 요구사항에 따라 달라질 수 있습니다. Uber의 H3는 활발히 유지되고 있으며 C 구현으로 Uber의 Github에서 찾을 수 있으며 다른 언어에 대한 바인딩도 존재합니다. S2는 Google의 Github에서 찾을 수 있지만 비교적 설정이 복잡할 수 있으며, Geohash는 가장 단순하고 널리 사용되는 도구입니다. 각각의 도구는 특유의 장단점을 가지며 유연성, 정확성, 사용의 단순함을 고려해 선택해야 합니다.\n\n## 요약 키워드:\n- 지리공간 인덱싱 (Geospatial Indexing)\n- Geohash, S2, H3\n- 위도-경도 쌍 (Latitude-Longitude Pairs)\n- Z-order 곡선, Hilbert 곡선, 이코사헤드론 투영 (Z-order Curve, Hilbert Curve, Icosahedron Projection)\n- 데이터 과학 도구 선택 (Data Science Tool Selection)"},{"title":"Hello Developer: 2024년 1월 - 둘러보기 - Apple Developer","comments":"(따라쟁이) 애플도 매달 개발자 뉴스레터를 보내주려나 봅니다 ㅎㅎ 이번달 Hello Developer에서는 아무래도 Vision Pro + visionOS 앱을 스토어에 제출하기 위한 내용을 포함하고 있습니다","keywords":["APPLE"],"location":"https:\/\/developer.apple.com\/kr\/news\/?id=8fppguuh&cid=hello-developer-ht","summary":""},{"comments":"한국 사람들은 이미 다 알고 있는 그 달사진 이야기입니다 ㅎㅎ","title":"How Samsung misled consumers with fake moon photos | by Elvis Hsiao ","location":"https:\/\/uxdesign.cc\/how-samsung-misled-consumers-with-fake-moon-photos-ab346b2e8d5a","keywords":["Culture"]},{"keywords":["UIKit","Framework","pick"],"location":"https:\/\/medium.com\/appcoda-tutorials\/how-to-use-swiftdata-in-uikit-apps-4471881f2a99","title":"How to Use SwiftData in UIKit Apps | by Simon Ng ","comments":"UIKit 기반 앱에서 코어 데이터 대신에 SwiftData를 사용하는 방법을 설명합니다. SwiftData가 주로 SwiftUI에서 사용하지만 UIKit에서도 충분히 활용할 수 있다는 것을 보여줍니다. 저도 개인 앱에서 마이그레이션을 시도해봐야겠습니다"},{"keywords":["OpenSources"],"comments":"해킨토시처럼 애플 하드웨어가 아닌 장비에 macOS를 설치하는 OpenCore 프로젝트가 있습니다. 그 프로젝트를 활용해서 새로운 macOS 설치를 지원하지 않는 하드웨어에 최신 버전을 설치하는 방식을 제안합니다","location":"https:\/\/zarinfam.medium.com\/how-to-install-macos-on-old-and-discontinued-macs-57911adebf0b","title":"How to install macOS on old and discontinued Macs | by Saeed Zarinfam "},{"keywords":["Framework","영어"],"location":"https:\/\/www.polpiella.dev\/stable-diffusion-swift-apps\/?","title":"How to use Stable Diffusion models in a Swift app","comments":"애플이 연말에 공개한 여러 ML 프로젝트 중에서 CoreML 용으로 바꾼 Stable Diffusion 모델을 사용하는 방법을 설명합니다. iOS에서 돌릴 수 있는 작은 모델도 있어서 사용해볼 만한 것 같습니다"},{"title":"Illustrative and Memorable User Experience Design Ideas | TMDesign","keywords":["Design"],"comments":"","location":"https:\/\/medium.com\/theymakedesign\/app-design-inspiration-137-6dc2604b3a40"},{"location":"https:\/\/medium.com\/@brianmasse_94741\/implementing-style-rectangularbackground-in-swiftui-86d913ed57b7","title":"Implementing Style: .RectangularBackground in SwiftUI | by Brian Masse ","comments":"","keywords":["SwiftUI"]},{"location":"https:\/\/medium.com\/macoclock\/into-2024-with-apple-fitness-for-the-best-you-c6935af536be","comments":"애플 피트니스+ 저도 써보고 싶다구요. 한글 더빙 안해도 좋으니까 한국에서도 좀 지원해주면 좋겠습니다","keywords":["Culture"],"title":"Into 2024 with Apple Fitness+ for the BEST you! | by David Lewis "},{"keywords":["OpenSources"],"title":"Is That Linux? No, It’s SketchyBar and macOS | by Michael Bao ","location":"https:\/\/medium.com\/linux-with-michael\/is-that-linux-no-its-sketchybar-and-macos-881e2ffdaf05","comments":"macOS 기본 메뉴바 대신에 SketchBar 라는 앱을 이용해서 마치 리눅스처럼 커스텀 바를 만드는 방식을 제안합니다. 메뉴를 사용하지는 다면 괜찮은 방법일 수 있습니다"},{"title":"MQTT Using SwiftUI. Introduction | by Byuvaraj ","location":"https:\/\/medium.com\/@byuvaraj.3\/mqtt-using-swiftui-29b6f1d8abce","keywords":["SwiftUI","pick"],"comments":"CocoaMQTT라는 MQTT 프로토콜 오픈소스를 활용해서 메시지 큐 방식으로 안전하게 메시지를 주고 받는 방법을 설명합니다. MQTT 설명이 부족하니까 상세한 자료를 따로 찾아보셔야 합니다"},{"title":"Managing Backpressure in Reactive Streams with Combine: | by Shashidhar Jagatap ","keywords":["Framework"],"location":"https:\/\/medium.com\/@shashidj206\/managing-backpressure-in-reactive-streams-with-combine-d6da9b00c6ef","comments":""},{"location":"https:\/\/medium.com\/@cmallikarjun118\/mastering-swiftui-performance-fa96d01cf29f","keywords":["SwiftUI"],"comments":"성능 관점에서 SwiftUI 뷰와 데이터 모델의 차이를 비교하는 방식에 대해 설명합니다. 불필요한 의존성을 줄이고 뷰 개수를 제한하고 값비싼 연산을 줄이는 팁도 포함되어 있습니다.","summary":"SwiftUI는 변경사항을 효율적으로 업데이트하기 위해 차이 비교 알고리즘을 사용합니다. 이 과정은 복잡한 뷰 계층 구조에서 자원을 많이 요구할 수 있습니다. EquatableView를 원하는 데로 비교하기 위해서는 Equatable 프로토콜을 준수하게 하여 == 연산자를 오버라이딩하면 됩니다. .equatable() 수정자를 사용하여 더 간결하게 동일한 기능을 제공할 수 있습니다\n\n성능 면에서 SwiftUI는 structs와 같은 값 타입과 잘 호환되므로, 데이터 모델을 작성할 때는 클래스보다 structs를 사용하는 것이 좋습니다. enums도 값 타입으로 효율적인 데이터 모델을 작성하는 데 유용합니다. 또한, @State, @Binding, @ObservedObject, @EnvironmentObject와 같은 프로퍼티 래퍼를 적절히 사용하여 효과적인 스토리지 관리가 중요합니다.\n\n불필요한 의존성을 줄이고, 조건 논리를 최소화하며, 비싼 계산은 백그라운드에서 처리하거나 캐시하는 것이 좋습니다. LazyVStack이나 LazyHStack을 사용하여 리스트의 성능을 개선할 수 있습니다. 뷰 계층구조 내에서 불필요한 뷰의 수를 제한하고, 고비용 연산은 피해야 합니다.\n\n@Environment와 @State 같은 프로퍼티 래퍼를 효과적으로 사용하고, Xcode의 SwiftUI 프로파일러나 뷰 디버거를 사용하여 성능 문제를 검출할 수 있습니다. Swift의 현대적 기능과 도구를 활용하여 효율적이고 유지보수 가능한 코드를 작성하는 것이 성능 최적화의 열쇠입니다.\n\n키워드: SwiftUI, 성능 최적화, EquatableView, 데이터 모델, structs, enums, 프로퍼티 래퍼, LazyVStack, 디버깅 도구","title":"Mastering SwiftUI Performance. Understanding Diffing in SwiftUI | by Mallikarjuna C "},{"title":"Modular Architecture for Apps | by Jacob Bartlett ","comments":"앱 모듈화는 여전히 iOS 개발자들에게 화두로군요. 그렇지만 계층을 나누면 역할을 분담을 수 있지만, 그것으로 모든 모듈화가 끝나지 않습니다. 계층을 나누더라도 어떤 타입들이 얼마나 주도적인지, 스레드를 다루는 지에 따라 달라질 수 있으니까요","location":"https:\/\/levelup.gitconnected.com\/modular-architecture-for-apps-964ad49463dc","keywords":["Architecture"]},{"keywords":["Design","pick"],"comments":"이번호에는 풍부한 UX 자료들이 많군요. 이제는 모바일 앱에서 내비게이션 흐름은 과연 정답이 하나일까요? HIG과 매트리얼 가이드 내용도 함께 설명해줘서 좋습니다","summary":"이 기사는 Ksenia Toloknova가 작성하였으며 모바일 애플리케이션 내의 탐색 패턴에 대해 다루고 있습니다. 효율적이고 직관적인 탐색이 앱 성공에 중요하며, 디자이너는 앱에 적합한 탐색 방법을 결정하는 데 필요한 정보를 이해해야 합니다. 기사에서는 탭 바와 네비게이션 바, 하단 네비게이션 등 여러 탐색 방법론을 비교하며 장단점을 설명하고 있습니다. 아울러, iOS와 안드로이드 플랫폼 간의 차이점과 각 플랫폼에서의 디자인 지침(Human Interface Guidelines와 Material Guidelines)도 제시됩니다. 추가적으로, 사이드바, 탐색 기반 탐색, 상단 바 등의 다른 탐색 옵션들에 대해서도 언급하고 있습니다. 최종적으로 디자인 시 도움이 될 수 있는 질문들이 제시되며, 애플리케이션의 사용자 경험 개선을 위해 올바른 탐색 메커니즘을 선택하는 것의 중요성을 강조합니다.\n\n요약 핵심 키워드: 모바일 앱 탐색, 디자인 지침, 사용자 경험, 플랫폼 차이점, 탐색 메커니즘 선택","location":"https:\/\/uxdesign.cc\/navigation-patterns-in-mobile-applications-how-to-make-the-right-choice-fa3c228e5097","title":"Navigation patterns in mobile applications. How to make the right choice? | by Ksenia Toloknova "},{"summary":"본 글에서는 버튼을 비활성화하는 것이 왜 사용자에게 좋지 않은 해결책인지에 대해 설명하고 있습니다. 저자는 버튼 비활성화가 사용자에게 어떤 의사소통도 하지 않으며, 특히 장애를 가진 사용자들에게 인식되지 않을 수 있다는 점을 지적합니다. 이로 인해 사용자는 혼란스러워하고 도움을 요청해야 하는 상황에 처하게 됩니다. 또한 비활성화된 버튼은 스크린 리더와 같은 보조 기술을 사용하는 사용자들에게도 문제를 일으킬 수 있는데, 예를 들어 버튼이 비활성화되면 탭 순서에서 제외되어 접근하기 어렵습니다. 색각 장애가 있는 사용자들도 비활성화된 버튼을 구별하기 어려울 수 있습니다.\n\n개발자들이 종종 드는 웹 접근성 가이드라인(WCAG)이나 특수 사례를 이유로 버튼 비활성화를 정당화하곤 하지만, 저자는 이러한 반박에 대해 논증합니다. WCAG에서는 흐린 명도 대비를 허용하지만, 이것이 접근성과 동일하지는 않으며, 지침은 최소한의 기준에 불과합니다. 저자는 보조 기술을 사용하는 사람들을 포함하여 모든 사용자에게 페이지가 작동한다는 것을 확실히 알려주는 솔루션을 찾으라고 주장합니다.\n\n저자는 비활성화 버튼을 결코 사용하지 말 것을 강조하며, 다음 글에서는 사용자에게 더 접근성이 좋은 대안들을 다루겠다고 예고합니다. 이 글은 다양한 사용자들과 그들이 웹 페이지를 소비하는 도구들을 고려하는 웹 개발과 UX 디자인의 태도 변화를 촉구합니다.\n\n요약 키워드: #버튼비활성화 #접근성 #사용자혼란 #보조기술 #색각장애","location":"https:\/\/uxdesign.cc\/never-ever-disable-buttons-part-1-why-not-73d16a0fb32b","title":"Never, ever disable buttons — Why not? | by Daniel Berryhill ","comments":"UX로 분류했던 글인데 좀 더 접근성 관점에서 설명하는 것 같아서 바꿨습니다. 버튼을 비활성화하는 것조차 접근성 측면에서 얼마나 나쁜 지 설명해줍니다. 읽으면서 저도 반성하는 내용이었습니다","keywords":["Accessibility"]},{"location":"https:\/\/medium.com\/@canakyildz\/hello-everyone-fecf943e0175","keywords":["Swift"],"title":"Observable through Swift Macros | by Can Akyıldız ","comments":"여전히 Observable 매크로에 대한 내용은 계속 나오네요. 중간에 코드를 매칭해서 설명해주는 그림이 깔끔한 글입니다"},{"title":"Perception: A back-port of @Observable","keywords":["OpenSources","영어","pick"],"summary":"Swift 5.9에서는 iOS 17, macOS 14, tvOS 17, watchOS 10 이상에서만 작동하는 강력한 Observation 라이브러리가 도입되었지만, iOS 17에 대한 기기의 채택률이 50% 미만이므로 많은 개발자들이 몇 년 동안 이 도구들을 사용할 수 없습니다. 그래서 포인트프리에서 Swift 5.9의 @Observable 도구를 iOS 13, macOS 10.15, tvOS 13 및 watchOS 6까지 이용할 수 있도록 백포팅한 'Perception' 라이브러리를 오픈 소스로 제공합니다.\n\nPerception은 `@Observable`을 `@Perceptible`로 변경하여 클래스 내 속성이 변경될 때 추적과 방송을 가능하게 합니다. SwiftUI 뷰에서 이 모델을 사용시, 'WithPerceptionTracking'을 사용하여 뷰가 모델의 변화를 감지하도록 해야 합니다. 라이브러리를 사용하지 않고 `@Perceptible` 클래스의 필드에 접근할 경우 런타임 경고가 트리거됩니다.\n\nPerception 라이브러리는 기존 @Observable 코드를 기반으로 몇 가지 작은 변경사항을 적용하였으며, iOS 17을 실행 중인 기기에서 Apple의 네이티브 관찰 프레임워크로 전환할 수 있습니다. 이로써, 최신 Apple 플랫폼을 대상으로 하지 않고 Swift의 훌륭한 관찰 도구들을 사용할 수 있습니다.\n\n키워드: Swift, 관찰 도구 백포팅, iOS 채택률, `@Observable`, Perception 라이브러리, `@Perceptible`, SwiftUI, 오픈 소스.","comments":"`@Observable`는 최소 지원 버전이 iOS 17, macOS 14 등 최신 버전만 지원하고 있습니다. 그래서 포인트 프리에서 iOS 13, macOS 10.15 처럼 이전 버전에서도 동작하도록 호환성을 갖는 Perception 오픈소스를 공개했습니다","location":"https:\/\/www.pointfree.co\/blog\/posts\/129-perception-a-back-port-of-observable?"},{"title":"RIB Architecture in iOS Swift | by Shilpesh S ","keywords":["Architecture"],"comments":"그 유명한 RIBs 맞습니다. 어렵지 않게 설명한 글입니다","location":"https:\/\/medium.com\/simform-engineering\/rib-architecture-in-ios-swift-79c17392e3f9"},{"keywords":["VisionOS","영어"],"comments":"공간 비디오를 만들거나 편집하는 방법을 설명합니다. 공간 비디오(?)는 언제쯤 직접 볼 수 있을까요 ㅎㅎ","title":"Reading and Writing Spatial Video with AVFoundation","location":"https:\/\/www.finnvoorhees.com\/words\/reading-and-writing-spatial-video-with-avfoundation\/?"},{"keywords":["Framework"],"comments":"구글 Gemini API를 앱에서 사용하도록 설정하는 방법입니다. 이거 해보려고 했는데 저는 아직 성공하지 못했습니다 ㅎㅎ ","title":"Seamless Synergy: Gemini AI Integration in Your iOS App Using SwiftUI | by Meet Patel ","location":"https:\/\/medium.com\/@patelmeet12\/seamless-synergy-gemini-ai-integration-in-your-ios-app-using-swiftui-89a6807746b7"},{"location":"https:\/\/stevenpcurtis.medium.com\/shared-initialization-for-appdelegate-and-scenedelegate-c059b145e05b","keywords":["UIKit"],"title":"Shared Initialization for AppDelegate and SceneDelegate | by Steven Curtis ","comments":""},{"keywords":["Culture"],"comments":"스위프트는 아니고 줄리아로 만든 것이지만 UDP 서버를 직접 만들고 DNS 서비스를 만드는 과정을 소개합니다","location":"https:\/\/chifi.dev\/starting-my-udp-dns-server-8cc196cffbbc","title":"Starting My UDP DNS Server | by Emma Boudreau "},{"title":"Swift Evolution Monthly: December ‘23 | by Cihat Gündüz ","keywords":["Swift"],"location":"https:\/\/jeehut.medium.com\/swift-evolution-monthly-december-23-ad8a4379b6e6","comments":"스위프트 에볼루션 포럼에서 Typed throws 제안이 수락된 것을 포함하는 12월 소식입니다"},{"title":"Swift Macros: Detailed & Practical Understanding | by Can Akyıldız ","location":"https:\/\/medium.com\/@canakyildz\/swift-macros-detailed-practical-understanding-829d88d337fb","keywords":["Swift"],"comments":""},{"keywords":["Framework"],"title":"SwiftData: a Quickstart | by Alessandro Manilii ","location":"https:\/\/medium.com\/@alessandromanilii\/swiftdata-a-quickstart-5159a9d84b24","comments":"SwiftData를 배울 수 있는 좋은 예제입니다"},{"location":"https:\/\/medium.com\/@redhotbits\/testable-swiftui-views-dd268d15a10e","keywords":["Testing"],"comments":"스위프트 동시성을 활용해서 테스트 가능한 화면을 만드는 방식에 대해 소개합니다","title":"Testable SwiftUI views using async\/await | by Lazar Otasevic "},{"title":"The 10 best UX interactions of 2023 | by Peter Ramsey ","comments":"이거 꽤 흥미롭네요. 지난 2023년에 관심을 받은 10가지 UX 인터액션을 소개합니다","location":"https:\/\/uxplanet.org\/the-10-best-ux-interactions-of-2023-6e5acc840adb","keywords":["Design","영어","pick"]},{"keywords":["Culture","pick"],"location":"https:\/\/medium.com\/macoclock\/the-11-craziest-and-most-advanced-apple-shortcuts-ive-ever-seen-37d3ec7814f3","title":"The 11 craziest and most advanced Apple shortcuts I’ve ever seen | by Nikhil Vemu ","summary":"","comments":"Shortcut - 단축어 앱 자주 사용하고 계신가요? 점점 기능이 추가되면서 간단한 프로그래밍이 가능할 정도로 좋아졌습니다. 배포되고 있는 쓸만한 단축어들을 소개합니다"},{"title":"The App Developer Who Cried Antitrust | by Andrew Zuo ","keywords":["Culture"],"comments":"","location":"https:\/\/medium.com\/macoclock\/the-app-developer-who-cried-antitrust-c4fd249de50b","summary":"애플의 앱 스토어가 반독점적이라고 주장하는 개발자들이 또 등장했습니다. 이번에는 Hey Calendar 앱이 문제입니다. 이 앱은 애플인사이더에 따르면 기능이 없다며 애플 대표가 인앱 결제로 전체 기능을 활성화할 것을 요구했습니다. 이는 앱 스토어의 지침 4.2 '최소 기능성'을 위반한 것으로 추측됩니다. 다시 말해, 앱이 유용하거나 독특해야 하며, 간단한 미디어 콘텐츠는 아이튠스 스토어나 애플 북스 스토어에 제출되어야 합니다.\n\n@dh라는 사용자가 애플이 HEY Calendar 앱을 현재 형태로 스토어에 등록하지 않겠다고 전화로 알렸다는 트윗을 올렸고 이 사람은 이전에 Typescript를 제거한 것에 대해 자랑했던 인물이기도 합니다. 이들은 애플이 앱 스토어에서 수익의 30%를 가져가는 것을 줄곧 비난합니다. 개발자들이 이 비율을 문제 삼는 것은 자신들의 앱에 대한 주목을 끌기 위한 PR 전략으로 보입니다.\n\n안티트러스트(경쟁법) 문제는 경쟁과 관련이 있습니다. 30%라는 수치는 업계의 표준이기 때문에 따로 문제가 되지 않습니다. 애플 앱 스토어는 규칙을 따르고 있고, 거부당하는 앱이 있기는 하지만 지나치게 나쁘지 않으며 실제로 상황이 많이 개선되었습니다. 결제 처리, 분배 파이프라인, 리뷰 등 애플은 많은 서비스를 제공하고 있으며 더 작은 회사들에게는 이것이 가치가 있다고 봅니다.\n\n이 글을 쓴 사람은 앤드류 주오(Andrew Zuo)로, 앱 개발과 애플 앱 스토어에 관한 다양한 글을 쓰는 작가입니다. 그는 또한 iOS와 안드로이드용 RSS 앱 Stratum과 언어 학습 앱 Litany를 개발했습니다.\n\n- 핵심 키워드: 애플 앱 스토어, Hey Calendar 앱, 반독점 주장, 개발자 비판, 앱 스토어 지침 4.2 위반, 수익의 30%, PR 전략, 안티트러스트, 앤드류 주오."},{"location":"https:\/\/medium.com\/macoclock\/the-fall-of-apple-180ce559fc8a","keywords":["Culture"],"comments":"아이폰 매출에 의존도가 높고, 아이폰 발전이 점점 늦어지며 인공지능 분야에서 OpenAI나 구글에 밀리면서 애플이 몰락하는 게 아니냐는 우려 섞인 글입니다","title":"The Fall Of Apple | by Andrew Zuo ","summary":"애플의 몰락에 대해 다루고 있는 앤드류 주오의 글은 애플의 비즈니스 모델에 대한 재정적 걱정이 커지고 있다고 시작합니다. 구글이 챗GPT의 등장으로 '코드 레드'를 선포했을 때의 일을 언급하며, 구글이 자사의 AI 서비스 '바드'를 출시했다가 큰 실수를 저지르고 말았다고 합니다. 반면, 애플은 AI에 대한 대응을 무시하고 있는데, 이것이 회사에 어떤 결과를 가져올지는 불확실하다고 말합니다.\n\n주오는 아이폰 판매 의존도가 높은 애플의 상황을 지적합니다. 아이폰 판매는 애플의 매출의 54%를 차지하고 있으며, 웨어러블과 서비스를 합치면 그 수치는 85%에 달합니다. 애플이 경쟁력 있는 휴대전화를 만들면 문제가 없겠지만, 그렇지 않다고 생각한다고 비판합니다.\n\n그는 애플이 마이크로소프트에 시가총액에서 추월당한 소식을 언급하며, 애플 주가가 하락하고 있다는 점을 지적합니다. 또한 애플이 '자원의 저주'를 경험하고 있으며, 이는 한 자원에 지나치게 의존하는 것이 문제가 될 수 있는 경제학 이론입니다. 애플은 아이폰에 집중하다가 혁신을 놓치고 있다고 말합니다.\n\n애플이 혁신을 하지 않는 한, 그들은 계속해서 '따라잡기' 상태에 머무르며, 대화형 AI 모델 개발에 뒤처지고 있다고 우려를 표합니다. 애플 내부에는 'Ajax'라는 대화형 AI 모델이 있지만, 이것이 얼마나 사용자에게 유용할지는 미지수라고 하며, 이제 애플이 더 빠른 혁신을 추구할 필요가 있다고 결론짓습니다.\n\n키워드: 애플, 아이폰 의존도, 주가 하락, 시가총액, 혁신 필요성, 대화형 AI 모델"},{"title":"Top 15 Software Development Trends in 2024 | by Serokell ","keywords":["Culture"],"comments":"","location":"https:\/\/serokell.medium.com\/top-15-software-development-trends-in-2024-5a4526653004"},{"location":"https:\/\/sabapathy7.medium.com\/uikit-setneedslayout-vs-layoutifneeded-vs-layoutsubviews-b0075b3bb441","keywords":["UIKit"],"title":"UIKit — setNeedsLayout vs layoutIfNeeded vs layoutSubviews() | by Kanagasabapathy Rajkumar ","comments":""},{"comments":"","location":"https:\/\/blog.prototypr.io\/ux-ui-design-trends-going-into-2024-ca43a839b541","title":"UX\/UI Design Trends Going Into 2024 | by Punit Chawla ","keywords":["Design"]},{"keywords":["SwiftUI"],"comments":"","location":"https:\/\/medium.com\/@kristof98\/unlocking-swiftuis-hidden-potential-leveraging-viewmodifiers-0fe8701694f9","title":"Unveiling SwiftUI: ViewModifiers | Medium"},{"location":"https:\/\/medium.com\/@jpmtech\/using-swift-signpost-to-measure-performance-of-a-specific-function-6779c920d0f4","comments":"OSLog 프레임워크에서 제공하는 OSSignposter 구조체를 활용해서 인스트루먼츠 프로파일링 중에 표지판(?)을 세우는 방법을 설명합니다","keywords":["Testing"],"title":"Using Swift Signpost to Measure Performance of a Specific Function | by Chase "},{"summary":"2023년 6월부터 미디엄에서 기술 관련 작가로 활동하기 시작한 크리스 카르부니아리스는 Python 프로그래밍 언어의 '데코레이터'에 대한 첫 글을 통해 글쓰기 경험을 시작했습니다. 그의 첫 시도는 성공적이었고, 커뮤니티에 기여하고자 하는 열망이 글쓰기의 계기가 되었습니다. 그는 소프트웨어 엔지니어로서 겪은 어려운 문제를 풀어주는 기사와 가이드에 감사함을 느끼고, 같은 방법으로 지식을 공유하고 싶어했습니다.\n\n글을 선택할 때 크리스는 몇 가지 원칙을 강조합니다. 우선 잘 알고 있는 주제에 집중해야 하고, 자신이 열정을 느끼는 것에 대해 써야 한다는 점입니다. 마지막으로 이미 다뤄진 주제를 반복해서 다루지 않아야 한다고 조언합니다. 그는 자신이 직접 겪은 문제 해결, 포괄적 가이드 및 개요 제공, 그리고 임의의 영감에서 비롯된 글을 통해 지식을 공유합니다.\n\n마무리하며 크리스는 취미로 글쓰기를 취미로 시작하거나 부업을 고려하는 엔지니어들에게 조언과 격려의 말을 전합니다. 그의 목표는 독자들에게 실질적으로 도움이 되는 정보를 제공하는 것입니다.\n\n키워드: 기술 글쓰기, 커뮤니티 기여, Python 데코레이터, 글쓰기 원칙, 지식 공유","keywords":["Culture","영어"],"location":"https:\/\/medium.com\/@christos.karvouniaris247\/what-i-write-about-as-a-technical-writer-3a1602c22574","title":"What I write about as a technical writer | by Chris Karvouniaris ","comments":"본격적으로 블로그 서비스들이 시작한 지 20년 정도가 지났고, 미디엄 서비스가 나온지도 10년이 넘었습니다. 점차 기술 블로그를 쓰는 사람들이 많아지고 있다보니 다양한 글이 많아지고 있는 시대입니다. \"기술 분야 작가\"라고 부를 수 있다면 무엇을 준비하고 글을 써야 하는지 설명합니다"},{"location":"https:\/\/forums.swift.org\/t\/pitch-default-values-for-string-interpolations\/69381","comments":"문자열 보간법에서 옵셔널 값을 다룰 때 default 값을 지정하는 문법을 제안하는 글입니다. 옵셔널 값을 다루는 방식도 계속해서 개선이 되고 있지만 문자열을 생성할 때도 귀찮은 경우가 많아서 관심있게 지켜보고 있습니다","summary":"","keywords":["Swift","영어"],"title":"[Pitch] Default values for string interpolations - Evolution \/ Pitches - Swift Forums"},{"comments":"iOS 앱을 위한 iXGuard 같은 보안툴 선택지가 많지가 않습니다. 개발용 보안툴이 어떤 부분을 도와주는 지 도움이 되는 글입니다","title":"iOS App Security:. A Detailed Guide on iOS App Security | by Yağız Erbay ","location":"https:\/\/medium.com\/adessoturkey\/ios-app-security-96c32ba4e036","keywords":["DeveloperTools"]},{"keywords":["APPLE"],"summary":"","title":"완다 오스틴, Apple 이사회에 합류 - Apple (KR)","location":"https:\/\/www.apple.com\/kr\/newsroom\/2024\/01\/wanda-austin-to-join-apples-board-of-directors\/","comments":"잡스가 복귀하고 애플 이사회 멤버가 됐던 앨 고어 부통령이 은퇴한다는 소식입니다. 애플 이사회도 이제 새로운 시대로 넘어가는 군요"}],"sequence":94}