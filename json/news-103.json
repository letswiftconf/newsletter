{"releaseAt":737132400,"version":"1.0","items":[{"keywords":["Culture"],"comments":"웹 어셈블리 WASM을 단지 JS를 더 빠르게 만드는 도구가 아니라 이해하는 만큼 더 꼼꼼하게 사용할 수 있다는 내용입니다. 요즘은 RUST로 WASM BE를 구현하는 경우가 많아지고 있고 Swift로도 시도하는 분들이 늘어나고 있습니다","location":"https:\/\/medium.com\/@yujiisobe\/i-was-understanding-wasm-all-wrong-e4bcab8d077c","summary":"","title":"I was understanding WASM all wrong! | by Yuji Isobe "},{"title":"10 AI Features You Didn’t Know Your iPhone Already Has | by The Useful Tech ","location":"https:\/\/medium.com\/macoclock\/10-ai-features-you-didnt-know-your-iphone-already-has-in-ios-17-d539220f6247","summary":"","comments":"이번호부터 AI 카테고리를 만들었습니다. iOS 18에는 대대적으로 AI 기능이 들어가지 않을까 기대하고 있지만, 이미 지금도 쓸만한 기능이 10개나 된다고 말합니다. ","keywords":["AI\/ML"]},{"summary":"","comments":"5월에 나온 앱들 중에서 눈에띄는 앱들을 소개해줍니다. Linekeeper는 북마크 앱인데요 그리고보니 제가 만들던 개발 자료 모음 앱과 비슷하네요 ","title":"5 Game-Changing iPhone Apps — May Edition. | by Clark ","location":"https:\/\/medium.com\/macoclock\/5-game-changing-iphone-apps-may-edition-8d56afc3b58f","keywords":["Culture"]},{"location":"https:\/\/evilgeek.medium.com\/7-amazing-hidden-iphone-features-i-bet-you-didnt-know-about-22a9c8949341","summary":"","comments":"아이폰과 iOS 자잘한 기능이 엄청 많은데 한 번도 안 써본 기능도 여전히 많습니다. 빨래를 위한 의류 태그 분석이나 자동차 계기판 인식 기능은 저도 한 번도 안써본 것 같네요","title":"7 Amazing Hidden iPhone Features I Bet You Didn’t Know About | by The Evil Geek ","keywords":["Culture"]},{"summary":"","keywords":["Design"],"location":"https:\/\/medium.com\/theymakedesign\/dashboard-design-ideas-vol-253-0b77e8889107","title":"Abstract and Clear Dashboard Design Ideas | TMDesign","comments":""},{"location":"https:\/\/developer.apple.com\/forums\/?","comments":"애플 개발자 포럼 사이트가 새단장을 했네요. 3년전쯤인가 한 번 바뀌었던 것 같은데 주제별로 묶어서 보여주면서 커뮤니티나 공간 컴퓨팅 같은 새로운 주제들이 생겼네요. Pathways 와 함께 개발자 자료 접근이 개선되고 있어서 좋네요","summary":"","keywords":["APPLE"],"title":"Apple Developer Forums"},{"title":"Apple Has Changed | by huizhou","comments":"새로운 아이패드 프로 압착기 광고가 여러 (특히 파괴되는 장치나 캐릭터를 만든) 창작자들에게 불쾌한 감정을 느끼게 했었는데요, 그걸 거꾸로 돌려보면서 비교해보니 또 다른 느낌이네요. 애플이 가진 독특함과 다르게 생각하기 측면에서 변한 것 같다고 지적합니다","location":"https:\/\/medium.com\/tech-and-me\/apple-has-changed-3551cc8b9144","summary":"","keywords":["Culture"]},{"keywords":["APPLE"],"location":"https:\/\/www.apple.com\/kr\/newsroom\/2024\/05\/apple-announces-new-accessibility-features-including-eye-tracking\/","comments":"애플이 가장 잘하는 분야 중에 하나가 접근성 - 손쉬운 사용 기능에 대한 적극적인 대응이겠죠. 5월 16일 세계 손쉬운 사용 인식의 날 (Global Accessibility Awareness Day)에 새로운 손쉬운 사용 기능들을 공개했습니다. 개인적으로 차량 모션 큐 기능이 정말 궁금하네요 ","title":"Apple, 눈 추적 등 새로운 손쉬운 사용 기능 공개 - Apple (KR)","summary":""},{"summary":"","location":"https:\/\/medium.com\/theymakedesign\/user-interface-designs-vol-159-ddb9ccb89aef","keywords":["Design"],"title":"Authentic and Simple User Interface Designs | TMDesign","comments":""},{"summary":"","title":"Boost Performance 100x Accelerate Framework","keywords":["Framework","영어"],"location":"https:\/\/getstream.io\/blog\/accelerate-framework\/?","comments":"CPU나 GPU 가속 기능을 이용해서 계산을 더 빠르게 할 수 있는 Accelerate 프레임워크 사용하고 개선해본 경험담입니다. "},{"keywords":["Swift","영어"],"title":"Build your next website in Swift – Hacking with Swift","location":"https:\/\/www.hackingwithswift.com\/articles\/266\/build-your-next-website-in-swift?","comments":"스위프트 코드와 빌더 구조로 홈페이지 HTML을 만들고 웹사이트를 만들 수 있는 방법을 설명합니다. ","summary":""},{"title":"CUDA vs OpenCL vs Metal : The Battle for GPU Acceleration Supremacy | by ","location":"https:\/\/medium.com\/@1kg\/cuda-vs-opencl-vs-metal-the-battle-for-gpu-acceleration-supremacy-b6bc99fbeef1","keywords":["Framework","pick"],"comments":"어디로 분류해야 하나 고민을 하다가 GPU 가속 프레임워크라고 보고 여기로 넣었습니다. NVIDIA GPU 유명세와 함께 CUDA가 가장 인기가 높아졌지만, 개인적으로 OpenCL처럼 CPU와 GPGPU가 복합적으로 합쳐진 Heterogeneous 프로그래밍이 대세가 될 것 같습니다. 아직은 개발자가 구분해서 따로 작성해야 하지만, 점차 하드웨어도 통합되고 개발 도구도 정밀하게 CPU와 GPU를 종합적으로 활용하는 시대가 되지 않을까 예상해봅니다. 물론 애플은 Metal을 선택할 것 같지만요","summary":"### 요약\n\nGPU 가속화 기술의 발전으로, 병렬 컴퓨팅은 현대 기술에서 중요한 역할을 하고 있습니다. NVIDIA의 CUDA(Compute Unified Device Architecture)와 Khronos Group의 OpenCL(Open Computing Language)이 선두주자로서 경쟁하고 있습니다. 이들 기술은 GPU의 병렬 처리 능력을 극대화하여 인공지능, 과학 시뮬레이션, 멀티미디어 처리 등 다양한 복잡한 문제를 해결합니다.\n\nCUDA는 NVIDIA GPU에 최적화된 독점 플랫폼으로, 고도의 성능을 제공합니다. 하지만 소프트웨어 투자에 대한 장기적인 하드웨어 유연성을 희생시키는 벤더 락인 문제를 가지고 있습니다. 반면, OpenCL은 하드웨어 벤더에 상관없이 범용 프로그램을 실행할 수 있는 개방형 표준으로, 하드웨어 유연성을 제공합니다. 그러나 하드웨어에 대한 일반화로 인해 일부 성능 저하가 발생할 수 있습니다.\n\n웹 GPU(WebGPU)와 같은 새로운 기술들도 등장하여 웹 환경에서 GPU 가속을 가능하게 하며, 다양한 이종 컴퓨팅 아키텍처도 점차 통합되고 있습니다. 이러한 변화를 통해 CUDA와 OpenCL은 GPU 가속화 기술의 중심에 서게 되며, 각각의 철학과 성능, 툴링 생태계를 분석하여 미래를 대비해야 합니다.\n\n결론적으로, CUDA의 독점 최적화와 OpenCL의 범용성이 경쟁을 이루며, 이 두 기술은 미래의 병렬 컴퓨팅 혁신을 주도할 것입니다.\n\n### 핵심 키워드\n1. CUDA\n2. OpenCL\n3. NVIDIA\n4. 병렬 컴퓨팅\n5. GPU 가속화"},{"comments":"장인 정신에 대해 이야기하면서 WWDC에 가면 동기부여도 되고 사람들을 만나면서 더 많은 것을 배울 기회가 있다는 얘기를 합니다. 저도 비슷하게 연속해서 WWDC에 참석해왔기 때문에 공감합니다. 북미에 산다면 이동이 더 쉽겠죠 ㅜㅜ 특히 최근 몇 년의 WWDC는 그런 게 약해져서 좀 아쉽습니다","location":"https:\/\/david-smith.org\/blog\/2024\/05\/15\/craftsmanship-and-consideration\/?","title":"Craftsmanship & Consideration - David Smith, Independent iOS Developer","summary":"","keywords":["Culture","영어"]},{"keywords":["Swift"],"comments":"","location":"https:\/\/medium.com\/@jpmtech\/difference-between-try-try-and-try-and-when-to-use-them-in-swift-d0e7102865b8","summary":"","title":"Difference Between try, try? and try! and When to Use Them in Swift | by Chase "},{"title":"Exploring Hardware: The New Raspberry Pi 5 | by Investigator","location":"https:\/\/medium.com\/@investigator515\/exploring-hardware-the-new-raspberry-pi-5-70965f9c7c5a","summary":"","keywords":["Hardware"],"comments":"라즈베리 파이 한 대쯤 사서 홈 브릿지로 홈킷 지원하지 않는 기구들을 연결하려고 해보신 적 있나요? 저는 책상 스탠드 스위치를 릴레이에 연결해서 시리와 홈킷에 연결을 시도해본 적이 있는데요, 라즈베리파이가 그럴 때 딱 좋습니다. 비교적 최근에 나온 라즈베리 파이 5에 대한 리뷰입니다."},{"keywords":["Swift"],"comments":"가볍게 런루프 만드는 예시를 보여줍니다. 스레드 동작시점부터 autorelease pool 관련해서 조금만 더 설명해주면 좋았을 것 같네요","summary":"","title":"Exploring Runloop in Swift. Managing Events | by Steven Curtis ","location":"https:\/\/stevenpcurtis.medium.com\/exploring-runloop-in-swift-c0d6ce44ed64"},{"keywords":["SwiftUI"],"comments":"내비게이션 스택을 이용하기 위해서 라우터를 구현하고 뷰를 바꾸는 방식을 설명합니다. 이게 참 불편해서 그냥 UIViewController나 UINavigationController를 사용하는 경우가 많죠","summary":"","location":"https:\/\/nikita-goncear.medium.com\/exploring-scalable-swiftui-navigation-30f8438e9d6d","title":"Exploring Scalable SwiftUI Navigation | by Nikita Goncear "},{"keywords":["Design"],"comments":"","title":"Expressive and Impressive Mobile UX Design Ideas | TMDesign","location":"https:\/\/medium.com\/theymakedesign\/mobile-ux-design-ideas-vol-230-ea7a072c3ac3","summary":""},{"title":"Firebase Firestore Is Too Expensive | by Andrew Zuo ","keywords":["Culture"],"comments":"앱 개발하다보면 여러 앱에서 한 곳에 데이터를 저장해서 가져가야 하기 때문에 백엔드 스토리지가 필요해서 파이어베이스 Firestore를 쓰기도 합니다. 최근에는 Supabase라는 대체 서비스가 관심을 받고 있기도 합니다","summary":"","location":"https:\/\/andrewzuo.com\/firebase-firestore-is-too-expensive-9e560f2a4364"},{"summary":"","title":"Fix Xcode losing references to downloaded Simulator runtimes | An Tran","location":"https:\/\/antran.app\/2024\/fixing_xcode_simulators\/?","comments":"Xcode 최신 버전부터 시뮬레이터 이미지 관리 방식이 달라졌습니다. 시뮬레이터 런타임이라는 일종의 가상 이미지로 관리를 하는데요, 가끔씩 다운로드 다 하고 설치가 안되거나 실패하는 경우가 있습니다. ","keywords":["DeveloperTools","영어"]},{"title":"Getting My Hands on the M4 iPad Pro! | by Mark Ellis ","comments":"M4 아이패드가 출시되고 나서 여러 리뷰가 나오고 있습니다. 영국에 있는 유투버가 언박싱 영상을 올리고 나서 리뷰 글을 올렸습니다. 개인적으로 13인치보다는 11인치가 휴대하기 좋아서 관심이 있었지만 가격과 스펙이 너무 높네요 ㅜㅜ","location":"https:\/\/medium.com\/macoclock\/getting-my-hands-on-the-m4-ipad-pro-83048ff27e6a","summary":"","keywords":["Hardware"]},{"location":"https:\/\/medium.com\/@pthapa1\/great-cli-applications-that-make-using-terminal-effortless-for-all-users-2ad72af5f99c","comments":"Xcode가 많은 기능을 처리해주지만 여전히 터미널을 열고 명령어로 설정을 바꾸거나, 로그를 확인하거나, 스크립트로 자동화를 시키거나 CLI 명령이 필요합니다. jq 나 jump는 자주 쓰게 되더라구요","title":"Great CLI Applications That Make Using Terminal Effortless For All Users | by Pratik Thapa ","summary":"","keywords":["DeveloperTools"]},{"location":"https:\/\/medium.com\/@batrakov.vitaly\/how-to-modularize-monolith-ios-app-e4d0a9477c9e","keywords":["Architecture"],"comments":"구조화를 한다는 것은 여러 가지 기준을 생각해야 합니다. Core 핵심 모듈과 기능 Features 모듈, 기능별 의존성 데이터 Composition Root 계층으로 나누는 방식을 제안합니다","summary":"","title":"How to modularize Monolith iOS App | by Vitaly Batrakov "},{"comments":"오랜만에 인스트루먼츠 도구를 활용한 글이네요. 앱 성능이나 메인 스레드 성능을 측정하기 위해서 os_signposts를 활용하는 것까지 설명해서 도움이 됩니다","summary":"","keywords":["DeveloperTools","영어","pick"],"location":"https:\/\/www.polpiella.dev\/time-profiler-instruments\/?","title":"How to profile your app's performance and Main Thread usage with Instruments and os_signposts"},{"location":"https:\/\/xander51.medium.com\/i-miss-the-old-headphone-era-effe64b78722","comments":"에어팟을 비롯한 버즈나 이어폰 생태계가 커지면서 수리하기도 어렵고 배터리가 소모적인데도 불구하고 경쟁 회사들이 다양하고 혁신적인 제품들보다는 저렴한 짝퉁 이어폰 제품만 많아지고 있는 현실을 비판합니다. 그만큼 음악을 듣는 방식도 바뀌고 있는게 아닐까요","title":"I Miss The Old Headphone Era. Apple ruined everyone’s fun | by Alex Rowe ","summary":"10년 전, 헤드폰 시장은 번성하고 있었습니다. Beats가 대형 헤드폰을 공공 장소에서 착용하는 것을 '멋진' 것으로 만들면서, 오디오 시장은 대중적 인기를 끌며 급격히 성장했습니다. Studio 헤드폰이 새로운 소비자 시장에 진입하며, Audio-Technica M50X와 같은 제품이 높은 인기를 끌었습니다. 이로 인해 노이즈 캔슬링, 무선 기술 및 독특한 하드웨어 형태의 새로운 발전이 이루어졌습니다.\n\n그러나 2014년 애플이 Beats를 인수하면서 헤드폰 시장은 완전히 변화하기 시작했습니다. 애플은 조금씩 무선 AirPods를 개발해 2016년에 출시하면서 시장을 장악했습니다. 그 결과, 다양한 혁신적인 신제품 출시는 금세 사라지고, 애플 제품의 저가 복제품이 시장에 범람하게 되었습니다. 심지어 애플 자체의 Beats 브랜드도 간헐적인 업데이트만 제공하며 점차 소멸하고 있습니다.\n\n애플의 생태계는 외부 지원이 거의 없으며, AirPods는 수리하기 매우 어려운 제품으로, 일회용 전자폐기물 문제를 야기하고 있습니다. 애플이 Beats 브랜드를 죽일 가능성도 있습니다. 이 과정에서 Sennheiser, SteelSeries, HyperX와 같은 다른 빅 오디오 회사들은 부정적인 영향을 받아 통합 및 합병을 겪었습니다.\n\n헤드폰 시장의 \"황금기\"는 애플의 시장 지배와 함께 끝났으며, 향후 큰 변화가 없는 한 다시 돌아오지 않을 것 같습니다. 지금의 시장은 AirPods와 유사 제품이 중심을 이루고 있으며, 혁신적인 제품 개발은 줄어들고 있습니다.\n\n### 키포인트 키워드:\n1. 애플의 시장 지배\n2. Beats 인수\n3. AirPods\n4. 헤드폰 시장 변화\n5. 오디오 회사 통합 및 합병","keywords":["Hardware"]},{"summary":"","title":"Is This Apple’s Best Ever iPad?. The 13-inch iPad Air is quite something | by Mark Ellis ","location":"https:\/\/medium.com\/macoclock\/is-this-apples-best-ever-ipad-4a3672eaf838","keywords":["Hardware"],"comments":"이번에 발표된 M4 아이패드와 M2 아이패드 에어 중에서 어떤 제품에 관심이 생기셨나요? 저는 스펙만 보면 이제 M2 프로에 가까운 M2 에어가 충분한 데 교모하게 매직 키보드가 구형이네요. 그냥 아이패드는 또 신형이더라구요 ㅜㅜ"},{"keywords":["Culture"],"location":"https:\/\/medium.com\/@callmeryan\/it-was-claimed-at-google-i-o-that-they-officially-support-kotlin-multiplatform-545b2178b638","comments":"옆동네 소식 중에서 구글 I\/O 소식입니다. 이제 KMP 코틀린 멀티 플랫폼이 공식 도구가 되었네요. 안드로이드와 iOS, 웹까지 지원하지만 역시나 안드로이드가 1순위라는 점이 아쉽습니다. ","title":"It was claimed at Google I\/O that they officially support Kotlin Multiplatform | by Ryan W ","summary":""},{"title":"Jared Sinclair | How Do You Know Whether or Not SwiftUI Previews and Preview Content Are Excluded From App Store Builds","keywords":["SwiftUI","pick"],"location":"https:\/\/jaredsinclair.com\/2024\/05\/20\/preview-content.html?","comments":"SwiftUI 미리보기 Preview를 위해 사용한 개발용 에셋들이 앱 스토어 제출하기 위해 아카이브하는 최적화 옵션과 함께 빌드할 때 포함되는 현상에 대해 언급합니다. ","summary":"글에서는 SwiftUI 미리보기(Preview)와 개발 자산(Development Assets)이 앱 스토어 빌드에서 제외되지 않는 문제를 다룹니다. 이는 Xcode에서 SwiftUI 미리보기를 처리하는 방식에서 발생하는 버그 또는 실망스러운 행동으로, 특히 빌드 최적화가 활성화되어 있을 때 문제가 발생합니다.\n\n글쓴이는 SwiftUI 미리보기를 작성하는 방법과 개발 자산을 저장하는 방법을 설명하면서, 미리보기와 개발 자산이 앱 스토어 빌드에서 제외되어야 한다는 이상적인 상황을 제시합니다. 그러나 실제로는 미리보기 소스 코드가 모든 빌드에서 컴파일되며, 최적화 과정에서 제거된다고 합니다. 또한, 개발 자산은 아카이브 빌드 프로세스 중에만 제외되며, 이러한 설정이 누락되면 앱 스토어 빌드에 포함될 수 있다고 합니다.\n\n이를 해결하기 위한 몇 가지 방법을 제공하지만, 가장 바람직한 해결책은 모든 SwiftUI 미리보기와 개발 자산 소스를 #if DEBUG 컴파일 조건으로 감싸는 것이라고 결론지었습니다. 이는 미리보기가 최적화된 빌드에서 문제를 일으키지 않도록 보장하며, 개발 자산 소스 코드가 앱 스토어 빌드에 포함되지 않도록 합니다. 이는 특히 멀티테넌트 하드웨어에서 빌드를 진행하는 팀에게 중요한 권고 사항입니다.\n\n키워드: SwiftUI 미리보기, Xcode, 앱 스토어 빌드, #if DEBUG, 개발 자산"},{"title":"Kotlin 2.0 Released: Faster And More Reliable | by Tom Smykowski ","summary":"","comments":"옆동네 코틀린이 2.0 정식 버전으로 나왔습니다. 1.0 버전이 나온게 2016년이니까 8년만에 메이저 버전이 올라갔네요","keywords":["Culture"],"location":"https:\/\/tomaszs2.medium.com\/kotlin-2-0-relesed-faster-and-more-reliable-4a55105de032"},{"summary":"","keywords":["AI\/ML","영어"],"title":"MLX: Apple silicon 용 Machine Learning 프레임워크 - 04.LLM inference example | 개발자 Story ","location":"https:\/\/www.sktenterprise.com\/bizInsight\/blogDetail\/dev\/9148\/?utm_content=applesilicon_240522","comments":"SKT 개발자 블로그에서 애플 실리콘에서 MLX를 활용하면 추론 능력이 더 좋아진다는 글을 보고 가져왔습니다. "},{"location":"https:\/\/www.avanderlee.com\/swiftui\/mvvm-architectural-coding-pattern-to-structure-views\/?","title":"MVVM: An architectural coding pattern to structure SwiftUI Views - SwiftLee","keywords":["Architecture"],"summary":"","comments":"SwiftUI 화면을 구조적으로 나누기 위해서는 데이터 구조도 구조적으로 나눠서 연결해야 하는데요 이게 단지 MVVM 이냐 아니냐의 문제는 아니고 화면이 조금만 복잡할 수록 데이터 구조가 여러 계층이 되기도 하고 struct나 class가 뒤죽박죽 되기도 합니다"},{"comments":"튜토리얼로 나쁘지 않아서 가져와 봤습니다","summary":"","title":"Mastering SwiftUI: Are You Really as Good as You Think? | by Vladyslav Shkodych ","keywords":["SwiftUI"],"location":"https:\/\/medium.com\/@vladislavshkodich\/mastering-swiftui-are-you-really-as-good-as-you-think-40a4953f7e88"},{"title":"Mastering the containerRelativeFrame Modifier in SwiftUI | Fatbobman","location":"https:\/\/fatbobman.com\/en\/posts\/mastering-the-containerrelativeframe-modifier-in-swiftui\/?","comments":"","summary":"","keywords":["SwiftUI"]},{"comments":"구글 I\/O와 함께 마이크로소프트 빌드 개발자 행사가 있었습니다. 그 중에서 MS가 윈도우즈에 내장해버린 리콜Recall 기능에 대한 우려와 프라이버시 관점에서 글입니다. 자동화가 필요할 수 있겠지만 모든 데이터를 알고있는 운영체제가, 모든 화면을 보고 판단하는 인공지능 기술까지 가진다면 프라이버시는 어디까지 보호할 수 있을까요","summary":"","keywords":["AI\/ML","영어"],"title":"Microsoft’s New “Recall” Feature That Takes Constant Screenshots Of Your PC Is A Privacy Nightmare | by Jim Clyde Monge ","location":"https:\/\/generativeai.pub\/microsofts-new-recall-feature-that-takes-constant-screenshots-of-your-pc-is-a-privacy-nightmare-7908a75beaae"},{"keywords":["Culture"],"title":"My Struggle With Xcode Continues. But there is hope on the horizon | by Anthony ","comments":"예전에도 소개한 적이 있는 70대 개발자 할아버지가 Xcode 화면이 너무 좁은데 큰 화면이 정말 필요한거냐. 아이패드 프로 13인치 에어라도 사면 어떠냐고 물어보네요","location":"https:\/\/medium.com\/tech-and-me\/my-struggle-with-xcode-continues-8b00f086ec3f","summary":""},{"keywords":["Framework"],"comments":"특정한 프레임워크를 사용했다기 보다는 앱을 설치하고 온보딩 시점에 일정 기간 무료 사용하는 오퍼Offer를 주고 후에 구독을 유도하는 방식을 도입했을 때 효과에 대해 설명합니다. Blinkist 앱에서 하는 방식을 따라해서 결과적으로 40% 이상 새로운 구독자가 생겼다고 말합니다","title":"My experience with the “Blinkist trial”: Big boost | Filip Němeček","summary":"","location":"https:\/\/nemecek.be\/blog\/205\/my-experience-with-the-blinkist-trial-big-boost?"},{"comments":"오랜만에 Vapor 소식이네요 FluentKit 에서 사용하는 Fluent 모델들이 Sendable-safe 한 것과 non-Sendable 한 것으로 구분되고 정리하는 중이라고 합니다. 슬슬 Swift 6를 대응해서라도 앞으로는 모델 설계할 때 이런 측면도 고려해야 할 것 같더군요","keywords":["ServerSide","영어"],"location":"https:\/\/blog.vapor.codes\/posts\/fluent-models-and-sendable\/?","summary":"","title":"On Fluent Models and Sendable warnings | The Vapor Blog"},{"location":"https:\/\/lucasvandongen.dev\/pinning_swift_package_versions.php?","comments":"아마 SPM 버전을 지정하는 부분에서 여러 경험담이 있으실텐데요, 모든 개발팀이나 개발 도구에서 버전 업데이트하는 것을 관리하는 것도 필요한 시점이 있더군요","summary":"","title":"Pinning Swift Package Versions: Predictable SPM Package Versions Across All Machines","keywords":["DeveloperTools","영어"]},{"summary":"","comments":"기존의 커스텀 뷰를 TipKit으로 바꾸고 저장된 상태에 따라 표시하도록 개선한 과정을 설명합니다","title":"Refactoring to TipKit from AppStorage and Custom Views in SwiftUI | Swiftjective-C","keywords":["Framework","SwiftUI","영어"],"location":"https:\/\/www.swiftjectivec.com\/refactoring-tipkit-swiftui-from-appstorage\/?"},{"keywords":["Architecture"],"comments":"앱에 필요한 데이터를 저장하는 저장소를 다루는 Repository 디자인 패턴에 대해 설명합니다. 꼭 코어데이터나 데이터베이스를 쓰지 않더라도 구조화가 필요한 경우에 좋은 것 같습니다","title":"Repository design pattern in Swift explained using code examples - SwiftLee","location":"https:\/\/www.avanderlee.com\/swift\/repository-design-pattern\/?","summary":""},{"title":"Running Any CPU Architecture on MacOS using UTM | by Mad Machine ","summary":"","comments":"UTM 이라는 QEMU 기반 x86_64 가상화 에뮬레이터에 대한 글입니다. 저도 최근에 사용해봤는데, M1 이상 애플 실리콘에서 x86_64용 macOS나 리눅스 설치하기에 딱 좋더군요","location":"https:\/\/fongyang.medium.com\/running-any-cpu-architecture-on-macos-using-utm-a1de25af85ff","keywords":["Culture"]},{"summary":"","location":"https:\/\/nilcoalescing.com\/blog\/StartingAndGrowingYourOwnTechnicalBlog\/?","comments":"","title":"Starting and growing your own technical blog","keywords":["Culture","영어"]},{"comments":"각 언어 기반으로 웹 서버를 준비해서 성능을 비교한 Alex Roest 글을 분석한 글입니다. 스위프트 기반은 Vapor와 비교했는데 Vapor가 비교적 성능이 좋게 나왔었습니다. 실제로는 그렇지 않은 부분이 많다는 것을 지적합니다","summary":"","title":"Swift sucks at web serving… or does it? – Wade Tregaskis","keywords":["ServerSide","영어","pick"],"location":"https:\/\/wadetregaskis.com\/swift-sucks-at-web-serving-or-does-it\/?"},{"keywords":["SwiftUI"],"location":"https:\/\/levelup.gitconnected.com\/swiftui-app-tutorial-part-2-first-action-dba44c84cd59","title":"SwiftUI App Tutorial. Part 2. First Action | by Alex Zarr ","comments":"","summary":""},{"comments":"UIKit 대신에 SwiftUI 기반으로 AVFoundation을 활용해서 카메라 앱을 만드는 과정을 보여주는 예제입니다. 구조적으로 잘 나누기 보다는 돌아가는 방식에 촛점이 맞춰져 있습니다","title":"SwiftUI: Camera App with AVFoundation | by Itsuki ","summary":"","keywords":["Framework","SwiftUI"],"location":"https:\/\/blog.stackademic.com\/swiftui-camera-app-with-avfoundation-9983dd87631a"},{"location":"https:\/\/blog.stackademic.com\/swiftui-custom-wheel-picker-38800698ae2f","comments":"","title":"SwiftUI: Custom Wheel Picker | by Itsuki ","summary":"","keywords":["SwiftUI"]},{"title":"TRS-80 Model 100: a Computer that was Programmed by Bill Gates | by Dmitrii Eliuseev ","keywords":["Culture"],"comments":"1983년도에 빌 게이츠가 프로그래밍 하던 TRS-80 모델 100이라는 고전(?) 컴퓨터입니다. Radio Shack 이라고 가전 브랜드에서 만든 제품이네요. 구글 본사 옆에 컴퓨터 역사 박물관에서 본 TRS-80이 생각납니다","location":"https:\/\/bootcamp.uxdesign.cc\/trs-80-model-100-a-computer-that-was-programmed-by-bill-gates-5a0caf9f930a","summary":""},{"title":"The Dark Side of Unidirectional Architectures in Swift | by Luis Recuenco ","comments":"단방향 아키텍처로 구현하더라도 입력-출력 처리 코드가 섞이면 서로 다른 계층에서 반복해서 호출하는 반복 루프가 생길 수 있죠. 저자는 ping-pong 문제라고 부르면서 어떤 경우가 있고, 조심해야 하는지 설명합니다","keywords":["Architecture"],"location":"https:\/\/medium.com\/the-swift-cooperative\/the-dark-side-of-unidirectional-architectures-in-swift-e4acf243ff1c","summary":""},{"keywords":["Hardware"],"title":"The New M4 iPad Pro Gives Me Headaches | by Tobias Hedtke ","comments":"새로운 M4 아이패드를 고르기 머리가 아프다고 하네요. 마음속으로는 M2 에어가 충분해.라고 하지만 WWDC까지 기다렸다가 M4 아이패드에 숨겨진 기능이라도 있을까봐 그런 것 같습니다 ","summary":"","location":"https:\/\/medium.com\/@tobias.hedtke\/the-new-m4-ipad-pro-gives-me-headaches-71cfe8133a5b"},{"title":"The Real Reason Apple’s New Ultra-Thin iPads Are a Nightmare | by Jano le Roux ","keywords":["Hardware"],"location":"https:\/\/ideaswithwings.org\/the-real-reason-apples-new-ultra-thin-ipads-are-a-nightmare-629003c160ca","comments":"0.5mm 두께 수준으로 얇은 아이패드 프로는 휘어지기 쉽고, 배터리도 더 적어질텐데 이게 정말 좋은거냐 반문합니다. 얇게 만드는 기술적인 도전보다는 밸런스가 중요하다고 언급합니다","summary":""},{"summary":"","location":"https:\/\/levelup.gitconnected.com\/top-5-tools-every-ios-developer-should-have-in-their-xcode-arsenal-fdcb8f60ff04","keywords":["DeveloperTools"],"title":"Top 5 Tools Every iOS Developer Should Have in Their Xcode Arsenal | by Emin Emini ","comments":"Xcode 때문에 불편한 부분을 도와주는 지원 도구를 소개합니다. 개발 환경이 용량이 부족하거나, 인공지능 코드 생성 도구, 시뮬레이터 확장도구, 스위프트 형식기 등 애플이 해야할 일을 대신해주는 도구들입니다"},{"location":"https:\/\/www.createwithswift.com\/understanding-typography-in-visionos\/?","summary":"","title":"Understanding typography in visionOS","comments":"WWDC 영상에 있는 내용들에서 크게 벗어나지 않지만 깔끔하게 정리가 되어 있습니다","keywords":["VisionOS","Design"]},{"title":"Unveiling Apple’s AI Strategy with MGI | Towards AI","keywords":["AI\/ML","영어"],"location":"https:\/\/pub.towardsai.net\/unveiling-apples-ai-strategy-with-mgie-22c1fedb7dc7","comments":"애플이 여러 모델을 계속해서 시험하고 있다고 합니다. 특히 멀티모달 MLLM 방식으로 이미지나 사진을 개선하거나, 다음에 나올 단어를 예측하거나 다양한 입출력 형식을 지원하면서 대화를 할 수 있는 모델로 촛점이 맞춰진 것 같습니다","summary":""},{"title":"Using Swift Data and The Composable Architecture (TCA) | by Harsh Vishwakarma ","comments":"Swift Data를 TCA와 함께 통합해서 사용하는 방식을 설명합니다","keywords":["Framework"],"location":"https:\/\/phychic-owl.medium.com\/using-swift-data-and-the-composable-architecture-tca-6af11ebef240","summary":""},{"keywords":["DeveloperTools","영어"],"location":"https:\/\/getuniversal.link\/?","summary":"","comments":"웹 사이트 또는 앱을 연결하는 AASA 형식 유니버설 링크를 테스트하도록 도와주는 사이트입니다","title":"Verify & Test AASA | Digital Bunker"},{"keywords":["Culture"],"title":"What’s next for Flutter? | by Jasper Morgan ","location":"https:\/\/medium.com\/snapp-mobile\/whats-next-for-flutter-6eb32e5e78ee","summary":"최근 Google의 인력 감축 소식이 전해지면서, Flutter에 미치는 영향을 간단하게 정리했습니다. 초기에는 구체적인 정보 없이 루머가 확산되었으나, Google의 Michael Thompson이 상황을 설명하면서 DevOps 역할에만 영향을 미쳤을 뿐, 팀 규모는 변하지 않았다고 밝혔습니다. 이번 인력 감축으로 인해 Google의 제품 및 프로젝트에 대한 신뢰가 다시 한번 손상되었고, Google은 다양한 고프로필 프로젝트를 중단하면서 브랜드 이미지에 타격을 주고 있습니다.\n\nFlutter는 다양한 대기업들의 프로젝트로 인해 이미 큰 성공을 거두고 있으며, Toyota, Canonical, Google Earth, Google Pay, Google Classroom, Alibaba, eBay 등 여러 회사들이 Flutter를 활용하고 있습니다. 이러한 투자는 Flutter와 커뮤니티가 초기 단계를 넘어섰음을 나타냅니다.\n\n그러나 Flutter의 채택률은 느려지고 있으며, 대형 브랜드의 프로젝트는 2021년 이후로 업데이트되지 않았습니다. 초기 성공을 이끈 Flutter 리더십 팀도 다른 회사나 프로젝트로 옮겨갔습니다. Google은 초기 채택을 확보하는 데 능숙하지만, 널리 채택되기까지의 긴 여정을 견디는 데 있어서는 부족함을 보이고 있습니다. \n\nFlutter가 지속적으로 진보하려면 Google의 집중적인 지원이 필요합니다. 최근 인력 감축으로 인해, Google이 Flutter에 계속 투자할지에 의문이 생깁니다. 하지만 현재의 궤도에서 계속 나아간다면, 앞으로도 좋은 성과를 낼 가능성이 높습니다. 예를 들어, Headspace(6천5백만 사용자)가 Flutter로 마이그레이션 중인 사례가 있습니다.\n\n모바일 개발의 효율성 증대 모델로의 전환 속에서 Flutter는 중요한 역할을 할 것입니다. 모바일 외에도 웹 어셈블리의 널리 확산을 위해 Flutter가 핵심이 될 수 있습니다. Snapp에서도 Flutter를 UI 개발의 현대적 대안으로 활용하고 있습니다. Flutter의 진정한 크로스 플랫폼 능력과 코드 재사용성은 더 널리 채택되기 위한 중요한 요소가 됩니다.\n\n키포인트 키워드:\n1. Google 인력 감축\n2. Flutter 커뮤니티\n3. 대기업 프로젝트\n4. 채택률 둔화\n5. 크로스 플랫폼 능력","comments":"여러 개발자 커뮤니티에서 플러터가 대세처럼 생각이 됐지만 채택하는 비율이 여전히 낮고, 대형 업체들도 업데이트하지 않고 있는 현실을 꼬집습니다. 집중적으로 지원해도 시원치 않을 판에 구글에서는 리소스가 줄어들고 있어서 우려를 표현합니다. "},{"location":"https:\/\/medium.com\/kerege\/xcode-swift-a-guide-to-efficient-builds-7fe3cad0da9b","comments":"효율적으로 더 빠르고 관리하기 쉽게 빌드하기 위해 필요한 사항들을 정리해줍니다. 중간 중간 최적화를 위한 자잘한 사례들까지 꽤 다양한 시도를 설명하고 있습니다","summary":"이 글에서는 Xcode와 Swift를 사용하여 빌드 효율성을 향상시키는 방법에 대해 설명합니다. 효율적인 빌드를 위한 좋은 코딩 습관과 Xcode 빌드 시스템을 구성하여 컴파일러의 작업 부하를 줄이는 방법을 다룹니다.\n\n### 이론\nXcode의 빌드 프로세스는 전처리, 컴파일, 링크 및 코드 서명을 포함합니다. 특히, 증분 빌드와 병렬 빌드의 중요성을 강조하며, 적절한 빌드 설정이 빌드 시간과 성능에 미치는 영향을 설명합니다.\n\n### 측정 및 분석\n빌드 최적화를 수행하기 전에 빌드 시간 정보를 수집해야 합니다. Xcode에서 'Build Timings Report' 기능을 사용하여 빌드 시간을 측정하고, 각 빌드 작업의 시간을 분석할 수 있습니다. 명령줄 도구인 `xcodebuild`를 사용하여 빌드 시간을 측정하고 `xcpretty`와 같은 도구로 출력을 포맷할 수 있습니다.\n\n### 실습\n효율적인 개발 프로세스를 통해 빌드 시간을 단축할 수 있습니다. 설정을 신중하게 구성하고, 컴파일러가 명시적인 정보를 갖도록 하며, 프로젝트를 더 작은 모듈로 나누는 것이 핵심입니다. 예를 들어, 전체 모듈 최적화를 활성화하고, 독립적인 타겟을 병렬로 빌드하도록 설정할 수 있습니다. 또한, 자원 사용을 최적화하고 의존성 사이클을 줄이고, 빌드 캐시를 효과적으로 사용하여 빌드 성능을 향상시킬 수 있습니다.\n\n### 요약\nXcode와 Swift의 빌드 시간을 최적화하기 위한 방법론들을 탐구하며, 효율적인 설정, 명시적 정보 제공, 모듈 분화 등의 전략을 통해 개발 생산성을 높이는 방법을 제시합니다.\n\n### 키워드\n1. Xcode 빌드 시스템\n2. 빌드 시간 최적화\n3. 증분 빌드\n4. 병렬 빌드\n5. Swift 컴파일 최적화","title":"Xcode, Swift: A Guide to Efficient Builds | by Yeskendir Salgara ","keywords":["DeveloperTools"]},{"keywords":["Culture"],"location":"https:\/\/medium.com\/macoclock\/ios-17-5-is-way-bigger-than-weve-expected-15-amazing-features-7e1960b03c7d","summary":"","comments":"얼마전에 업데이트된 iOS 17.5 기능들에 대해 정리한 글입니다. ","title":"iOS 17.5 Is Way Bigger Than We’ve Expected — 15+ Amazing Features! | by Nikhil Vemu "},{"title":"iOS 17.5 — It’s Awesome | by The Evil Geek ","summary":"","comments":"위의 글과 같이 읽어보기 좋습니다. 북미에서 지원하는 Apple News+에서는 낱말 퀴즈도 있었군요!","location":"https:\/\/evilgeek.medium.com\/ios-17-5-its-awesome-66fdf29ba91b","keywords":["Culture"]},{"comments":"ㅎㅎ 맥이 지루해졌다면 몇 가지 트릭이나 앱으로 소소한 즐거움을 찾도록 도와주는 글입니다. ","title":"macOS Is Boring — 12 Mini Apps That Make An “Unfathomable” Difference | by Nikhil Vemu ","summary":"","location":"https:\/\/medium.com\/macoclock\/macos-is-boring-12-mini-apps-that-make-an-unfathomable-difference-5d4f97f20c0e","keywords":["Culture","pick"]},{"summary":"","title":"mise en place Xcode · paul-samuels.com","keywords":["DeveloperTools","영어"],"location":"https:\/\/paul-samuels.com\/blog\/2024\/05\/18\/mise-en-place-xcode\/?","comments":"\"미~즈\" 라고 읽는 개발 환경 설정을 도와주는 도구입니다. 여러 개발 환경을 지원하는 데 Xcode를 사용하는 개발자를 위해서 필요한 사항들을 설명합니다"},{"summary":"","title":"nil Mean in SwiftUI? | Fatbobman","keywords":["SwiftUI","영어"],"comments":"","location":"https:\/\/fatbobman.com\/en\/posts\/spacing-of-swiftui\/?"},{"comments":"SPI (System Programming Interface) 속성으로 의도하지 않은 API를 숨기거나 특정 고객에게만 오픈할 수 있는 방식들을 설명합니다","keywords":["Swift","영어"],"title":"spi or How to develop better APIs in Swift | VaraniOS","location":"https:\/\/varanios.com\/articles\/spi-or-how-to-develop-better-apis-in-swift\/?","summary":""},{"summary":"소프트웨어 개발자 중 많은 이들은 스크럼(Scrum)을 회사의 \"의무\"로 여기며, 일상적으로 진행되는 데일리 미팅, 리뷰, 리파인먼트, 회고 등을 시간 낭비로 여긴다. 이 글은 스크럼을 왜 그렇게 느끼는지, 스크럼의 진정한 가치가 무엇인지, 그리고 우리 역할을 조금만 다르게 생각하면 모든 것이 달라질 수 있다는 점을 설명한다.\n\n우리는 소프트웨어 개발자일 수도 있지만, 스크럼은 제품 개발에 더 중점을 둔다. 스크럼은 단순히 소프트웨어를 효율적으로 구현하는 것이 아니라, 시장에 성공적으로 출시될 수 있는 제품을 개발하는 것이 목표다. 스크럼의 참가자들은 총체적인 제품 개발에 참여하며, 이는 단순히 코드를 작성하는 것 이상이다.\n\n제품 개발은 복잡하고, 다학제적이며, 매우 역동적이다. 대부분의 제품은 실패하며, 설사 성공하더라도 그중 일부 기능만이 실제로 사용된다. 스크럼은 이러한 높은 실패율과 빠르게 변하는 상황에 대처할 수 있도록 설계되었다. 또한, 여러 필수 기능들을 조기에 충족시키고 리스크를 확인하여 대응할 수 있게 돕는다.\n\n소프트웨어 개발자는 제품 개발자의 역할로 진화해야 한다. 이는 단순히 코드를 작성하는 것에서 벗어나, 사용자의 요구를 반영하고 시장의 변화를 즉각적으로 반영하는 것을 의미한다. 스크럼은 협업과 팀워크를 통해 다학제적 문제를 해결하도록 도와준다. 이는 각 개인의 강점을 강화하여 제품 개발 전 과정에 걸쳐 효과적이다.\n\n스크럼은 단순히 작업 목록을 소화하는 시스템이 아니라, 제품 개발의 복잡하고 빠르게 변하는 환경을 다루며 전체 팀이 더 나은 결과를 도출할 수 있도록 돕는 프레임워크다.\n\n키워드: 스크럼, 제품 개발, 다학제적, 협업, 복잡성 극복","keywords":["Culture","영어"],"location":"https:\/\/medium.com\/mastering-agility\/why-scrum-for-software-developers-63c97ca7870b","title":"“Why Scrum” for Software Developers | by Roy Klein ","comments":"소프트웨어 개발자가 단순히 요구사항을 구현만 하기 보다는, 제품 비즈니스를 이해하고 시장에 출시할 수 있는 제품을 개발하는 제품 개발자가 되어야 한다. 스크럼 방식은 작업 목록을 소비하는 게 아니라 제품 개발의 복잡한 변화를 팀 전체가 원하는 방향으로 나아가도록 돕는 도구라고 설명합니다"}],"sequence":103}